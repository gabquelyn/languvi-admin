org: lonedev
app: languvi-admin
service: languvi-admin
frameworkVersion: '3'

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    LANGUAGE_PAIR_TABLE: ${self:service}-languagePairTable-${sls:stage}
    TOPIC_PRICING_TABLE: ${self:service}-topicPricingTable-${sls:stage}
    SERVICE_TABLE: ${self:service}-servicesTable-${sls:stage}
    ORDERS_TABLE: ${self:service}-clientOrdersTable-${sls:stage}
    TRANSLATORS_TABLE: ${self:custom.translatorTable.name}
    CLIENTS_TABLE: ${self:custom.clientTable.name}
    ADMIN_POOL_ID: { Ref: AdminPool }
    ADMIN_CLIENT_ID : { Ref: AdminClient}
    MAIL_QUEUE_URL : ${self:custom.mailQueue.url}
    CLIENT_BUCKET_NAME : ${self:custom.clientBucket.name}
    API_KEY: ${self:custom.mateCatKeys.api}
    SECRET_KEY: ${self:custom.mateCatKeys.secret}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:Query*'
            - 'dynamodb:PutItem'
            - 'dynamodb:Scan*'
            - 'dynamodb:GetItem*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminUpdateUserAttributes
            - sqs:SendMessage
            - sqs:SendMessage
            - s3:PutObject
            - s3:DeleteObject
            
          Resource:
            - ${self:custom.topicPricingTableArn}
            - ${self:custom.servicesTableArn}
            - ${self:custom.languagePairTableArn}
            - ${self:custom.clientOrdersTableArn}
            - ${self:custom.translatorTable.arn}
            - ${self:custom.clientTable.arn}
            - ${self:custom.adminPoolArn}
            - ${self:custom.mailQueue.arn}
            - ${self:custom.clientBucket.arn}

  httpApi:
    cors: true
    authorizers:
      adminAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: ${self:custom.cognitoIssuerUrl.Value}
        audience: 
          - !Ref AdminClient

resources:
  Resources: 
    AdminPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: languvi-admin-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        AutoVerifiedAttributes:
          - email

    AdminClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: languvi-admin-pool
        GenerateSecret: false
        UserPoolId: !Ref AdminPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - 'ADMIN_NO_SRP_AUTH'

    LanguagePairTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:service}-languagePairTable-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions: 
          - AttributeName: id
            AttributeType: S
          - AttributeName: source
            AttributeType: S
          - AttributeName: target
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: sourceAndTarget
            KeySchema:
              - AttributeName: source
                KeyType: HASH
              - AttributeName: target
                KeyType: RANGE
            Projection:
              ProjectionType: ALL


    WordPricingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-topicPricingTable-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: topic
            AttributeType: S 
        KeySchema:
          - AttributeName: id
            KeyType: HASH 
        GlobalSecondaryIndexes:
          - IndexName: topics
            KeySchema: 
              - AttributeName: topic
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ServicesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-servicesTable-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH 
    
    # this table should generate all filters for the client side
    ClientOrdersTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:service}-clientOrdersTable-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: paid
            AttributeType: N
          - AttributeName: translator
            AttributeType: S
          - AttributeName: proofreader
            AttributeType: S
          - AttributeName: due_date
            AttributeType: S
          - AttributeName: standing
            AttributeType: S
          - AttributeName: owner
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: proofreadProjects
            KeySchema:
              - AttributeName: proofreader
                KeyType: HASH
            Projection: 
              ProjectionType: ALL

          - IndexName: translateprojects
            KeySchema:
              - AttributeName: translator
                KeyType: HASH
            Projection: 
              ProjectionType: ALL

          - IndexName: clientOrders
            KeySchema:
              - AttributeName: owner
                KeyType: HASH
            Projection: 
              ProjectionType: ALL

          - IndexName: orderStatus
            KeySchema:
              - AttributeName: standing
                KeyType: HASH
            Projection: 
              ProjectionType: ALL

          - IndexName: dueOrders
            KeySchema:
              - AttributeName: due_date
                KeyType: HASH
            Projection: 
              ProjectionType: ALL

          - IndexName: transactions
            KeySchema:
              - AttributeName: paid
                KeyType: HASH
            Projection: 
              ProjectionType: ALL

          - IndexName: translatorpool
            KeySchema:
              - AttributeName: paid
                KeyType: HASH
              - AttributeName: translator
                KeyType: RANGE                
            Projection: 
              ProjectionType: ALL

          
  Outputs:
    ClientOrdersTableArn:
      Value: ${self:custom.clientOrdersTableArn}      
      Export:
        Name: clientOrdersTable-${self:provider.stage}-Arn
    clientOrdersTableName:
      Value: ${self:service}-clientOrdersTable-${sls:stage}
      Export:
        Name: clientOrdersTable-${self:provider.stage}-Name
    ServicesTableName:
      Value: ${self:service}-servicesTable-${sls:stage}
      Export:
        Name: ServicesTable-${self:provider.stage}-Name
    ServicesTableArn:
      Value: ${self:custom.servicesTableArn}
      Export:
        Name: ServicesTable-${self:provider.stage}-Arn
    LanguagePairTableName: 
      Value: ${self:service}-languagePairTable-${sls:stage}
      Export:
        Name: LanguagePairTable-${self:provider.stage}-Name
    LanguagePairTableArn:
      Value:  ${self:custom.languagePairTableArn}
      Export:
        Name: LanguagePairTable-${self:provider.stage}-Arn

    TopicsTableTableName: 
      Value: ${self:service}-topicPricingTable-${sls:stage}
      Export:
        Name: topicsTableTable-${self:provider.stage}-Name
    TopicsTableTableArn:
      Value:  ${self:custom.topicPricingTableArn}
      Export:
        Name: topicsTableTable-${self:provider.stage}-Arn

functions:
  templogin:
    handler: src/authentication/templogin.handler
    events:
      - httpApi:
          path: /templogin
          method: POST

  adminlogin:
    handler: src/authentication/login.handler
    events:
      - httpApi:
          path: /login
          method: POST
      
  updatepassword:
    handler: src/authentication/updatepassword.handler
    events:
      - httpApi:
          path: /updatepassword
          method: POST
          authorizer:
            name: adminAuthorizer

  createpair:
    handler: src/language_pricing.create_pair
    events:
      - httpApi:
          path: /createpair
          method: POST
          authorizer:
            name: adminAuthorizer

  getpairs:
    handler: src/language_pricing.get_pairs
    events:
      - httpApi:
          path: /pairs
          method: GET
          authorizer:
            name: adminAuthorizer

  editpair:
    handler: src/language_pricing.edit_pair
    events:
      - httpApi:
          path: /editpair/{id}
          method: POST
          authorizer:
            name: adminAuthorizer

  deletepair:
    handler: src/language_pricing.delete_pair
    events:
      - httpApi:
          path: /deletepair/{id}
          method: DELETE
          authorizer:
            name: adminAuthorizer

  createtopic:
    handler: src/topic_pricing.create_topic
    events:
      - httpApi:
          path: /createtopic
          method: POST
          authorizer:
            name: adminAuthorizer

  sendpaymentemail:
    handler: src/clientActions/sendclientpaymentemail.handler
    events:
      - httpApi:
          path: /paymentaction
          method: POST
          authorizer:
            name: adminAuthorizer

  cancel:
    handler: src/clientActions/cancelorder.handler
    events:
      - httpApi:
          path: /reject
          method: POST
          authorizer:
            name: adminAuthorizer
  complete:
    handler: src/clientActions/markcomplete.handler
    events:
      - httpApi:
          path: /complete
          method: POST
          authorizer:
            name: adminAuthorizer

  undocancel:
    handler: src/clientActions/undocancel.handler
    events:
      - httpApi:
          path: /accept
          method: POST
          authorizer:
            name: adminAuthorizer

  gettopics:
    handler: src/topic_pricing.get_topics
    events:
      - httpApi:
          path: /topics
          method: GET
          authorizer:
            name: adminAuthorizer

  getjobs:
    handler: src/getjobs.handler
    events:
      - httpApi:
          path: /jobs
          method: GET
          authorizer:
            name: adminAuthorizer

  edittopic:
    handler: src/topic_pricing.edit_topic
    events:
      - httpApi:
          path: /edittopic/{id}
          method: POST
          authorizer:
            name: adminAuthorizer

  deletetopic:
    handler: src/topic_pricing.delete_topic
    events:
      - httpApi:
          path: /deletetopic/{id}
          method: DELETE
          authorizer:
            name: adminAuthorizer

  putservices:
    handler: src/package_service.put_service
    events:
      - httpApi:
          path: /services
          method: PUT
          authorizer:
            name: adminAuthorizer

  getservices:
    handler: src/package_service.get_service
    events:
      - httpApi:
          path: /services
          method: GET
          authorizer:
            name: adminAuthorizer

  getorders:
    handler: src/getorders.handler
    events:
      - httpApi:
          path: /orders
          method: GET
          authorizer:
            name: adminAuthorizer

  translatorforpair:
    handler: src/getTranslatorForOrder.handler
    events:
      - httpApi:
          path: /translators/{from}/{to}
          method: GET
          authorizer:
            name: adminAuthorizer

  getorder:
    handler: src/getorder.handler
    events:
      - httpApi:
          path: /order/{orderId}
          method: GET
          authorizer:
            name: adminAuthorizer

  editorder:
    handler: src/editorder.handler  
    events:
      - httpApi:
          path: /editorder
          method: POST  
          authorizer:
            name: adminAuthorizer

  getTranslators:
    handler: src/translatorActions/getTranslators.handler  
    events:
      - httpApi:
          path: /translators
          method: GET
          authorizer:
            name: adminAuthorizer

  getClients:
    handler: src/clientActions/getClients.handler  
    events:
      - httpApi:
          path: /clients
          method: GET
          authorizer:
            name: adminAuthorizer

  detatchFile:
    handler: src/clientActions/detatchFile.handler  
    events:
      - httpApi:
          path: /detatch
          method: POST
          authorizer:
            name: adminAuthorizer

  attatchFiles:
    handler: src/clientActions/attatchfile.handler  
    events:
      - httpApi:
          path: /attatch
          method: POST
          authorizer:
            name: adminAuthorizer

  getTranslator:
    handler: src/translatorActions/getTranslator.handler  
    events:
      - httpApi:
          path: /translator/{email}
          method: GET
          authorizer:
            name: adminAuthorizer
            
  approveTranslator:
    handler: src/translatorActions/approveTranslator.handler  
    events:
      - httpApi:
          path: /approve
          method: POST
          authorizer:
            name: adminAuthorizer

  disapproveTranslator:
    handler: src/translatorActions/disapproveTranslator.handler  
    events:
      - httpApi:
          path: /disapprove
          method: POST  
          authorizer:
            name: adminAuthorizer

  openMate:
    handler: src/clientActions/useCat.handler  
    events:
      - httpApi:
          path: /usecat
          method: POST 
          authorizer:
            name: adminAuthorizer

custom:
  languagePairTableArn: !GetAtt LanguagePairTable.Arn
  topicPricingTableArn: !GetAtt WordPricingTable.Arn
  clientOrdersTableArn: !GetAtt ClientOrdersTable.Arn
  servicesTableArn: !GetAtt ServicesTable.Arn
  adminPoolArn: !GetAtt AdminPool.Arn
  cognitoIssuerUrl: 
    Value: !Join
      - ''
      - - 'https://cognito-idp.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/'
        - !Ref AdminPool
  translatorTable:
    name: !ImportValue languvi-translator-translatorsTable-${sls:stage}-Name
    arn: !ImportValue languvi-translator-translatorsTable-${sls:stage}-Arn
  mailQueue:
    arn: !ImportValue MailQueue-${sls:stage}-Arn
    url: !ImportValue MailQueue-${sls:stage}-Url
  clientTable:
    name: !ImportValue languvi-client-clientTable-${sls:stage}-Name
    arn: !ImportValue languvi-client-clientTable-${sls:stage}-Arn
  clientBucket:
    name: !ImportValue languvi-client-clientBucket-${sls:stage}-Name
    arn: !ImportValue languvi-client-clientBucket-${sls:stage}-Arn
  mateCatKeys:
    api: ZTEwOWMTEwNT0ce62be1
    secret: Y2YyMGOGY3Yz1728d413
  
  custom:
  bundle:
    linting: false
    webpackConfig:
      module:
        rules:
          - test: /node_libcurl\.node$/
            loader: file-loader